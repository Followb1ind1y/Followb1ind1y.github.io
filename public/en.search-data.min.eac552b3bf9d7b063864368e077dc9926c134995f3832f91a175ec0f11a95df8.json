[{"id":0,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":1,"href":"/docs/common-libraries/numpy/","title":"NumPy","section":"Common Libraries","content":" NumPy # "},{"id":2,"href":"/docs/common-libraries/numpy_%E5%89%AF%E6%9C%AC2/","title":"NumPy","section":"Common Libraries","content":" NumPy # "},{"id":3,"href":"/docs/common-libraries/pandas/","title":"NumPy","section":"Common Libraries","content":" NumPy # "},{"id":4,"href":"/docs/python-basics/python-fundamentals/","title":"Python Fundamentals","section":"Python Basics","content":" Python Fundamentals # "},{"id":5,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":6,"href":"/docs/python-basics/leetcode/","title":"Leetcode Notes","section":"Python Basics","content":" Leetcode Interview Preparation Notes # Basic Data Structures # Arrays # In Python, arrays are typically represented using lists. While Python doesn\u0026rsquo;t have a native array type as seen in other languages like Java or C++, lists are versatile and can be used similarly to arrays.\n【Last Update: 2024-08-14】\narr = [] # O(1) arr = [1, 2, 3] # O(n), where n is the number of elements first_element = arr[0] # O(1) arr[1] = 10 # O(1) arr.append(6) # O(1) on average for appending arr.insert(2, 15) # O(n), where n is the number of elements after the insertion index arr.remove(15) # O(n), where n is the number of elements in the list [remove the first 15 in the array] del arr[2] # O(n), where n is the number of elements after the deleted index last_element = arr.pop() # O(1) arr.sort() # 原地排序 sorted_arr = sorted(arr) # 返回排序后的数组 arr[::-1] # arr 倒序 ## Counter() 的常用语法和使用情况 from collections import Counter arr = [1, 2, 2, 3, 3, 3] counts = Counter(arr) # 结果：Counter({3: 3, 2: 2, 1: 1}) ## 找到出现次数最多的元素 most_common_element = counts.most_common(1)[0] # 结果：(3, 3) ## 判断出现的元素是否相同 arr1 = [1, 2, 3] arr2 = [3, 2, 1] is_anagram = Counter(arr1) == Counter(arr2) # 结果：True ## set() 的常用语法和使用情况 arr = [1, 2, 2, 3, 4, 4] ## 快速查找 seen = set(arr) if 3 in seen: print(\u0026#34;3 is in array\u0026#34;) ## 去重 unique_elements = list(set(arr)) # 结果：[1, 2, 3, 4] ## 两个数组的交集 arr1 = [1, 2, 2, 3] arr2 = [2, 3, 4] intersection = list(set(arr1) \u0026amp; set(arr2)) # 结果：[2, 3] Strings # Strings in Python are immutable sequences of characters. You can perform various operations on strings using built-in methods and operators.\n【Last Update: 2024-08-14】\ns = \u0026#34;Hello, World!\u0026#34; # O(n), where n is the length of the string first_char = s[0] # O(1) substring = s[7:12] # O(k), where k is the length of the substring combined = s + \u0026#34; Python\u0026#34; # O(n + m), where n and m are the lengths of the two strings repeated = s * 2 # O(n * k), where k is the number of repetitions upper_s = s.upper() # O(n), where n is the length of the string lower_s = s.lower() # O(n), where n is the length of the string starts_with_hello = s.startswith(\u0026#34;Hello\u0026#34;) # O(n), where n is the length of the prefix contains_world = \u0026#34;World\u0026#34; in s # O(n * m), where n is the length of the string and m is the length of the substring replaced_s = s.replace(\u0026#34;World\u0026#34;, \u0026#34;Python\u0026#34;) # O(n * m), where n is the length of the string and m is the length of the substring words = s.split(\u0026#34;, \u0026#34;) # O(n), where n is the length of the string joined = \u0026#34; - \u0026#34;.join(words) # O(n), where n is the total length of the resulting string Linked Lists # A Linked List is a linear data structure consisting of nodes, where each node contains:\nA data part that stores the actual data. A next part (or pointer) that points to the next node in the list. 【Last Update: 2024-11-14】\n## A node in a linked list can be represented as a class class ListNode: def __init__(self, data=0, next=None): self.data = data # Data of the node self.next = next # Pointer to the next node ## Inserting Nodes def insert_at_beginning(head, data): new_node = ListNode(data) # Create a new node new_node.next = head # Link the new node to the current head return new_node # New node becomes the head ## Deleting Nodes def delete_from_beginning(head): if not head: return None return head.next # The second node becomes the new head ## Searching for a Node def search(head, key): current = head while current: if current.data == key: return True # Found the data current = current.next return False # Data not found Stack # A Stack is a linear data structure that stores items in a Last-In/First-Out (LIFO) or First-In/Last-Out (FILO) manner. In stack, a new element is added at one end and an element is removed from that end only.\npush(a) – Inserts the element ‘a’ at the top of the stack – Time Complexity: O(1) pop() – Deletes the topmost element of the stack – Time Complexity: O(1) Peek - View the top element without removing it. Empty - Check if the stack is empty. 【Last Update: 2024-11-19】\nstack = [] # Push elements onto the stack stack.append(1) stack.append(2) # Pop element from the stack top = stack.pop() # Removes and returns 2 # Peek the top element top = stack[-1] if stack else None # Returns 1 # Check if the stack is empty is_empty = len(stack) == 0 Queue # Queue is a linear data structure that stores items in First In First Out (FIFO) manner. With a queue the least recently added item is removed first.\nEnqueue: Adds an item to the queue. If the queue is full, then it is said to be an Overflow condition – Time Complexity : O(1) Dequeue: Removes an item from the queue. The items are popped in the same order in which they are pushed. If the queue is empty, then it is said to be an Underflow condition – Time Complexity : O(1) Peek: View the front element without removing it. Empty: Check if the queue is empty. 【Last Update: 2024-11-19】\nfrom collections import deque # Initialize a queue queue = deque() # Enqueue elements queue.append(1) queue.append(2) # Dequeue element front = queue.popleft() # Removes and returns 1 # Peek at the front element front = queue[0] if queue else None # Check if the queue is empty is_empty = len(queue) == 0 Deque # A deque is a generalized queue that allows insertion and deletion from both ends with O(1) complexity. Internally, it is implemented as a doubly linked list or a circular buffer.\n【Last Update: 2024-11-25】\nfrom collections import deque # Initialize a deque dq = deque() # Add elements dq.append(1) # Add to the right dq.appendleft(2) # Add to the left # Remove elements dq.pop() # Remove from the right dq.popleft() # Remove from the left # Access and manipulation dq.extend([3, 4]) # Add multiple elements to the right dq.extendleft([0, -1]) # Add multiple elements to the left (reversed order) dq.rotate(1) # Rotate elements right dq.rotate(-1) # Rotate elements left dq.clear() # Clear all elements Advanced Data Structures # Overview # Trees: Explore the concepts of binary trees, binary search trees, AVL trees, and tree traversals (in-order, pre-order, post-order, level-order). Graphs: Learn about different graph representations (adjacency list, adjacency matrix), and traversal algorithms (Depth-First Search, Breadth-First Search) to solve problems like finding connected components or checking cycles. Hash Tables: Study how hash tables work, including hashing functions, handling collisions, and applications in tasks like item counting or implementing dictionaries. Heap # A heap is a complete binary tree stored as an array. It maintains the heap property: in a min-heap, the parent is less than or equal to its children. Insertions and deletions are O(log n) due to the need to maintain the heap property.\nTwo main types: Min-Heap: The root node is the smallest, and every parent node is smaller than or equal to its children. Max-Heap: The root node is the largest, and every parent node is larger than or equal to its children. Root Node Access: Min-Heap: Root is the smallest element Max-Heap: Root is the largest element. Efficient Operations: Insert and delete both take O(log n). Maintains heap properties using adjustments (upward or downward shifts). 【Last Update: 2024-11-25】\nimport heapq # Initialize a heap heap = [] # Add elements heapq.heappush(heap, 3) # Push element into the heap heapq.heappush(heap, 1) heapq.heappush(heap, 4) # Access the smallest element smallest = heap[0] # Remove elements min_element = heapq.heappop(heap) # Pop the smallest element # Heapify an existing list nums = [4, 1, 7, 3] heapq.heapify(nums) # Get n largest or smallest elements largest = heapq.nlargest(2, nums) smallest = heapq.nsmallest(2, nums) Tree # A tree is a hierarchical data structure with nodes connected by edges. The topmost node is the root, and nodes with no children are called leaves.\nBinary Tree: Each node has at most two children. Binary Search Tree (BST): A binary tree where the left child contains values less than the parent, and the right child contains values greater. Balanced Tree: A tree where the height difference between left and right subtrees of any node is minimal (e.g., AVL tree, Red-Black tree). Tree Traversals: Preorder Traversal (Root, Left, Right) Inorder Traversal (Left, Root, Right) Postorder Traversal (Left, Right, Root) ## Trees are often represented using classes. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ## Preorder Traversal (Root, Left, Right) def preorder_traversal(root): if root: print(root.val) preorder_traversal(root.left) preorder_traversal(root.right) ## Inorder Traversal (Left, Root, Right) def inorder_traversal(root): if root: inorder_traversal(root.left) print(root.val) inorder_traversal(root.right) ## Postorder Traversal (Left, Right, Root) def postorder_traversal(root): if root: postorder_traversal(root.left) postorder_traversal(root.right) print(root.val) ## Binary Search Tree (BST) Operations ## 1. Insert a Node def insert_into_bst(root, val): if not root: return TreeNode(val) if val \u0026lt; root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root ## 2. Search for a Value def search_bst(root, val): if not root or root.val == val: return root if val \u0026lt; root.val: return search_bst(root.left, val) return search_bst(root.right, val) ## 3. Delete a Node def delete_node(root, key): if not root: return None if key \u0026lt; root.val: root.left = delete_node(root.left, key) elif key \u0026gt; root.val: root.right = delete_node(root.right, key) else: if not root.left: return root.right if not root.right: return root.left min_larger_node = root.right while min_larger_node.left: min_larger_node = min_larger_node.left root.val = min_larger_node.val root.right = delete_node(root.right, root.val) return root Hash Tables # In Python, the built-in dict type (short for dictionary) functions as a hash table. Hash tables are a key data structure used for efficient data retrieval and storage, providing average time complexities of O(1) for insertion, deletion, and lookup operations due to their underlying hashing mechanism.\n【Last Update: 2024-11-06】\nmy_dict = {} # Creating an empty dictionary my_dict = {\u0026#39;key1\u0026#39;: \u0026#39;value1\u0026#39;, \u0026#39;key2\u0026#39;: \u0026#39;value2\u0026#39;} # Creating a dictionary with initial values value = my_dict[\u0026#39;key1\u0026#39;] # Accessing a value by key my_dict[\u0026#39;key3\u0026#39;] = \u0026#39;value3\u0026#39; # Adding a new key-value pair my_dict[\u0026#39;key2\u0026#39;] = \u0026#39;new_value2\u0026#39; # Updating an existing key-value pair del my_dict[\u0026#39;key1\u0026#39;] # Removing an entry by key value = my_dict.pop(\u0026#39;key2\u0026#39;) # Popping an entry (removes and returns the value) exists = \u0026#39;key3\u0026#39; in my_dict # # Checking if a key is in the dictionary [True] for key in my_dict: print(key, my_dict[key]) # Iterating through keys for key, value in my_dict.items(): # Iterating through key-value pairs print(key, value) for value in my_dict.values(): # Iterating through values print(value) # defaultdict 使用方法，没见过的元素不会报错。适用于计数、分组和嵌套字典等应用。 from collections import defaultdict # 使用 int 类型的 defaultdict dd = defaultdict(int) print(dd[\u0026#39;missing_key\u0026#39;]) # 输出：0，因为 int() 的默认值是 0 print(dd) # 输出：defaultdict(\u0026lt;class \u0026#39;int\u0026#39;\u0026gt;, {\u0026#39;missing_key\u0026#39;: 0}) # 统计元素出现次数 data = \u0026#34;abracadabra\u0026#34; counter = defaultdict(int) for char in data: counter[char] += 1 print(counter) # 输出：defaultdict(\u0026lt;class \u0026#39;int\u0026#39;\u0026gt;, {\u0026#39;a\u0026#39;: 5, \u0026#39;b\u0026#39;: 2, \u0026#39;r\u0026#39;: 2, \u0026#39;c\u0026#39;: 1, \u0026#39;d\u0026#39;: 1}) # defaultdict(list)常用于将多个值归类到同一个键下。 data = [(\u0026#34;apple\u0026#34;, 1), (\u0026#34;banana\u0026#34;, 2), (\u0026#34;apple\u0026#34;, 3), (\u0026#34;banana\u0026#34;, 4)] grouped_data = defaultdict(list) for fruit, count in data: grouped_data[fruit].append(count) print(grouped_data) # 输出：defaultdict(\u0026lt;class \u0026#39;list\u0026#39;\u0026gt;, {\u0026#39;apple\u0026#39;: [1, 3], \u0026#39;banana\u0026#39;: [2, 4]}) # 可以使用dict()将defaultdict转换为普通字典。 dd = defaultdict(int) dd[\u0026#39;a\u0026#39;] += 1 print(dict(dd)) # 输出：{\u0026#39;a\u0026#39;: 1} Core Algorithms # Overview # Two Pointer: The two-pointer technique is used primarily in solving array and linked list problems. It involves using two pointers to traverse the data structure, allowing for efficient searching and processing of elements. Sorting Algorithms: Review the mechanisms and use cases for quicksort, mergesort, and heapsort. Understand the trade-offs in terms of time and space complexity. Search Algorithms: Study binary search on sorted arrays, and learn about its variations for finding the first or last position of an element. Recursion and Backtracking: Understand how to apply recursion for solving problems involving permutations, combinations, and other backtrack-required scenarios. Study the call stack mechanism and how to optimize recursion through memoization. Prefix Sum and Suffix Sum: Prefix Sum and Suffix Sum are techniques used to compute the sum of elements in a subarray quickly by precomputing cumulative sums. Two Pointer # Finding Pairs with a Given Sum: When looking for two numbers in a sorted array that add up to a specific target. Reversing a String or Array: Using two pointers to swap elements from the start and end until they meet in the middle. Merging Two Sorted Arrays: Traversing both arrays simultaneously to create a new sorted array. Removing Duplicates from a Sorted Array: Using two pointers to track unique elements. 设置 two pointers 的时候，left 一般会在最前面，但是 right 不一定在最后，可以设置在 left 后面。 【Last Update: 2024-11-07】\nPrefix Sum and Suffix Sum # 1.\tPrefix Sum: For an array nums, the prefix sum at each index i is the sum of all elements from the start of the array up to i. This allows you to find the sum of any subarray [i, j] in constant time by calculating prefix[j+1] - prefix[i]. 2.\tSuffix Sum: For the same array nums, the suffix sum at index i is the sum of all elements from i to the end of the array. It enables efficient queries for sums of subarrays that start from any index i to a given end by using suffix[i] - suffix[j+1]. ## Input [1, 2, 3, 4] -\u0026gt; Output [2x3x4, 1x3x4, 1x2x4, 1x2x3] = [24, 12, 8, 6] ## Predix -\u0026gt; [0, 1, 1x2, 1x2x3] = [0, 1, 2, 6] ## Suffix -\u0026gt; [2x3x4, 3x4, 4, 0] = [24, 12, 4, 0] def productExceptSelf(self, nums: List[int]) -\u0026gt; List[int]: res = [1] * len(nums) prefix, suffix = 1, 1 for i in range(len(nums)): res[i] = prefix prefix *= nums[i] for j in range(len(nums)-1,-1,-1): res[j] *= suffix suffix *= nums[j] return res 【Last Update: 2024-11-11】\nAdvanced Algorithms # Overview: # Dynamic Programming: Explore the methodology of solving problems by breaking them down into smaller subproblems, storing results, and combining them to solve larger problems. Focus on understanding the concepts of overlapping subproblems and optimal substructure. Greedy Algorithms: Learn how greedy choices can lead to globally optimized solutions and their applications in problems like scheduling, graph based problems (like minimum spanning trees), and currency denomination. Graph Algorithms: Study shortest path algorithms (Dijkstra’s, Bellman-Ford) and minimum spanning tree algorithms (Prim’s, Kruskal’s). Understand their use cases and limitations. "},{"id":7,"href":"/docs/example/","title":"Example Site","section":"Docs","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad # Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol # Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque # Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":8,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":9,"href":"/docs/python-basics/leetcode/practice-history/","title":"Practice History","section":"Leetcode Notes","content":" Leetcode 练习记录 # 此页面记录了我在 LeetCode 平台上完成的算法题目练习，每条记录包括完成日期、题目链接以及涉及的数据结构或算法主题。这些练习旨在巩固基础知识、提高解题技巧，并为技术面试做好充分准备。以下为部分记录：\nDate: 2024-11-06: LeetCode 1 - Two Sum【Array】【Hash Table】 Date: 2024-11-07: LeetCode 15 - 3 Sum【Array】【Two Pointers】 Date: 2024-11-08: LeetCode 121 - Best Time to Buy and Sell Stock【Array】【Dynamic Programming】 LeetCode 349 - Intersection of Two Arrays【Array】【Hash Table】 LeetCode 219 - Contains Duplicate II【Array】【Hash Table】 Date: 2024-11-10: Leetcode 454 - 4Sum II【Array】【Hash Table】 Date: 2024-11-11: Leetcode 53 - Maximum Subarray【Array】 Leetcode 238 - Product of Array Except Self【Array】【Prefix Sum】 Date: 2024-11-12: Leetcode 344 - Reverse String【String】【Two Pointers】 Leetcode 26 - Remove Duplicates from Sorted Array【Array】【Two Pointers】 Leetcode 27 - Remove Element【Array】【Two Pointers】 Date: 2024-11-13: Leetcode 3 - Longest Substring Without Repeating Characters【String】【Hash Table】 Leetcode 5 - Longest Palindromic Substring【String】【Two Pointers】 Leetcode 28 - Find the Index of the First Occurrence in a String【String】【Two Pointers】 Leetcode 49 - Group Anagrams【String】【Hash Table】 Date: 2024-11-14: Leetcode 206 - Reverse Linked List【Linked List】【Recursion】 Date: 2024-11-15: Leetcode 21 - Merge Two Sorted Lists【Linked List】【Recursion】 Leetcode 141 - Linked List Cycle【Linked List】【Hash Table】 Leetcode 203 - Remove Linked List Elements【Linked List】【Recursion】 Leetcode 83 - Remove Duplicates from Sorted List【Linked List】 Leetcode 2 - Add Two Numbers【Linked List】【Recursion】【Math】 Date: 2024-11-17: Leetcode 19 - Remove N-th Node From End of List【Linked List】【Two Pointers】 Leetcode 138 - Copy List with Random Pointer【Linked List】【Hash Table】 Leetcode 234 - Palindrome Linked List【Linked List】 Leetcode 160 - Intersection of Two Linked Lists【Linked List】【Hash Table】 Date: 2024-11-18: Leetcode 92 - Reverse Linked List II【Linked List】 Leetcode 61 - Rotate List【Linked List】【Two Pointers】 Date: 2024-11-19: Leetcode 20 - Valid Parentheses【Stack】【String】 Date: 2024-11-21: Leetcode 155 - Min Stack【Stack】 Leetcode 682 - Baseball Game【Stack】 Date: 2024-11-22: Leetcode 739 - Daily Temperatures【Stack】【Monotonic Stack】 Leetcode 232 - Implement Queue using Stacks【Queue】【Stack】 Leetcode 225 - Implement Stack using Queues【Stack】【Queue】 Leetcode 622 - Design Circular Queue【Queue】 Date: 2024-11-24: Leetcode 933 - Number of Recent Calls【Queue】 Date: 2024-11-25: Leetcode 239 - Sliding Window Maximum【Deque】【Sliding Window】 Leetcode 641 - Design Circular Deque【Deque】 Leetcode 215 - Kth Largest Element in an Array【Heap】 Leetcode 23 - Merge k Sorted Lists【Heap】 Date: 2024-11-26: Leetcode 94 - Binary Tree Inorder Traversal【Tree】【Binary Tree】 Leetcode 144 - Binary Tree Preorder Traversal【Tree】【Binary Tree】 Leetcode 145 - Binary Tree Postorder Traversal【Tree】【Binary Tree】 Leetcode 104 - Maximum Depth of Binary Tree【Tree】【Binary Tree】【Depth-First Search】 Date: 2024-11-27: Leetcode 111 - Minimum Depth of Binary Tree【Tree】【Binary Tree】【Depth-First Search】 Leetcode 112 - Path Sum【Tree】【Binary Tree】【Depth-First Search】 Leetcode 101 - Symmetric Tree【Tree】【Binary Tree】【Depth-First Search】 Date: 2024-11-28: Leetcode 98 - Validate Binary Search Tree【Binary Search Tree】【Depth-First Search】 Date: 2024-12-04: Leetcode 226 - Invert Binary Tree【Binary Search Tree】【Depth-First Search】 Date: 2024-12-05: Leetcode 235 - Lowest Common Ancestor of a Binary Search Tree【Binary Search Tree】【Depth-First Search】 Leetcode 700 - Search in a Binary Search Tree【Binary Search Tree】 "},{"id":10,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":11,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":12,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":13,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\nExample # {{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns # {{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":14,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Title Markdown content # Lorem markdownum insigne\u0026hellip;\n"},{"id":15,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":16,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":17,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nSecond Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":18,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":19,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":20,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{% tabs %}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{% /tabs %}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":21,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\] Text continues here.\n"}]